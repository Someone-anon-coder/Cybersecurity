Understanding Web Applications

Web applications are programs or software applications that run on a web server and are accessed via web browsers using the HTTP or HTTPS protocols. 
Understanding these protocols is crucial in web application security, as they are the foundation of communication between clients (usually web browsers) and servers.


What is a Web Application?

    A web application is a software application that runs on a web server, as opposed to being installed on a user's local device. 
    Web applications are accessible through a web browser using a URL. 
    Web apps range from simple sites like blogs to complex platforms like online banking, e-commerce, and social media.

        - Frontend (Client-side): The part of the web application that users interact with. It’s usually built using HTML, CSS, JavaScript, and other front-end technologies. The front end runs in the user's web browser.
        - Backend (Server-side): The part of the application that handles the business logic, database operations, and client requests. It usually consists of a web server (e.g., Apache, Nginx), a programming language (e.g., PHP, Python, Ruby), and a database (e.g., MySQL, PostgreSQL, MongoDB).
    

HTTP (Hypertext Transfer Protocol)

    HTTP is the protocol used for transmitting data over the web. 
    It defines how messages are formatted and transmitted, and how web servers and browsers should respond to various commands. 
    HTTP is stateless, meaning it does not keep track of previous requests. 
    Each request is treated independently.

    HTTP Request and Response

        - HTTP Request: When you visit a webpage (e.g., https://www.example.com), your browser sends an HTTP request to the server. This request may include headers, query parameters, and a body (in POST requests).
        - HTTP Response: The server processes the request and sends back an HTTP response, which contains the requested data (HTML, images, JSON, etc.) along with HTTP headers indicating the status of the request.
    
    Basic HTTP Request Example:

        - HTTP request when you visit a website:

            GET /index.html HTTP/1.1
            Host: www.example.com
            User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36
    
        This request is asking the server to provide the /index.html page of www.example.com.
    
    Basic HTTP Response Example:

        - The server might respond with the following:

            HTTP/1.1 200 OK
            Content-Type: text/html; charset=UTF-8
            Content-Length: 1234

            <html>
            <head><title>Welcome</title></head>
            <body>
              <h1>Hello, World!</h1>
            </body>
            </html>
        
        - HTTP Status Code: In the response, 200 OK is a status code that means the request was successful.
        - Content-Type: Indicates the type of the content (in this case, HTML).
        - Content-Length: Specifies the size of the response body.


HTTPS (Hypertext Transfer Protocol Secure)

    HTTPS is the secure version of HTTP, where communication between the client and the server is encrypted using TLS/SSL (Transport Layer Security / Secure Sockets Layer).
    How HTTPS Works:

        - Encryption: Data sent between the client and server is encrypted to protect it from eavesdropping. This means that even if someone intercepts the data, they will not be able to read it.
        - Authentication: HTTPS also ensures that the server you are communicating with is authentic and that you're not sending sensitive data (like passwords or credit card details) to a fraudulent server.
        - Data Integrity: HTTPS ensures that the data sent between the client and server is not tampered with during transmission.
    
    HTTPS Request Example:

            GET /secure-page HTTP/1.1
            Host: www.secureexample.com
            User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36
        
        But since the data is encrypted, you cannot see the body of the request or the response in plaintext like HTTP.
    
    How HTTPS Ensures Security:

        - SSL/TLS Handshake:
            - When you visit a site using HTTPS, the client and server perform an SSL/TLS handshake to establish a secure connection.
            - The server presents its SSL certificate, which is verified by the client.
            - If the certificate is valid, a secure encrypted connection is established.

        - Symmetric Encryption:
            - After the handshake, symmetric encryption is used to encrypt the data for the session. This means both parties use the same key to encrypt and decrypt the data.
    
    Certificate Authorities (CAs):

        - CAs are trusted third parties that issue SSL/TLS certificates. 
        - These certificates are used to verify that the server is authentic and that the data will be encrypted during transmission.

    Example of a Secure HTTPS URL:

            https://www.securewebsite.com

        Notice the "s" in "https://", which indicates that the communication is encrypted.


The Role of HTTP/HTTPS in Web Applications

    HTTP is used for general communication between web servers and clients. 
    It’s commonly used for public websites where data security is not a primary concern.
    HTTPS is essential for web applications that handle sensitive data, such as login credentials, payment information, and personal data. 
    All modern web applications should use HTTPS to protect user data from interception.

    Why Use HTTPS?

        - Security: HTTPS encrypts data, protecting it from attackers who may try to intercept communication (Man-in-the-Middle attacks).
        - Trust: Websites using HTTPS are often marked as "secure" by browsers. If you visit a website that doesn’t use HTTPS, you might see a warning like "Not Secure" in the address bar.
        - SEO Benefits: Search engines like Google favor HTTPS-enabled websites over HTTP websites, which can improve your website’s ranking.
        - Data Integrity: HTTPS ensures that the data sent between the server and the client is not modified during transit.
    

Differences Between HTTP and HTTPS

    Feature        | HTTP                                            | HTTPS
    Protocol       | Hypertext Transfer Protocol                     | Hypertext Transfer Protocol Secure
    Encryption     | No encryption                                   | Data is encrypted using SSL/TLS
    Port           | Port 80                                         | Port 443
    Security       | Vulnerable to man-in-the-middle attacks         | Protected by encryption (SSL/TLS)
    Data Integrity | No data integrity checking                      | Ensures data integrity
    Trust          | No certificate validation                       | Uses SSL certificates for authentication
    Performance	   | Faster in general due to no encryption overhead | Slightly slower due to encryption/decryption process


Common HTTP Methods and Headers

    HTTP Methods:

        - GET: Requests data from a specified resource (e.g., a webpage). It’s the most common method for fetching content.
        - POST: Sends data to the server to create/update resources (e.g., submitting a form).
        - PUT: Updates a current resource with new data.
        - DELETE: Deletes the specified resource.
        - HEAD: Similar to GET, but it only retrieves the headers without the actual content.
        - OPTIONS: Describes the communication options for the target resource.
    
    HTTP Headers:

        - Content-Type: Describes the type of content being sent (e.g., text/html, application/json).
        - Authorization: Contains credentials for authentication (e.g., Basic or Bearer tokens).
        - User-Agent: Provides information about the client software (browser, OS, etc.).
        - Cache-Control: Controls caching behavior (e.g., no-cache or max-age=3600).
        - Set-Cookie: Sends cookies from the server to the client, which are stored in the browser for future requests.
    

Practical Exercise: Viewing HTTP/HTTPS Traffic Using a Web Browser

    One of the easiest ways to observe HTTP/HTTPS traffic is by using the developer tools in modern web browsers (like Chrome, Firefox, or Edge).
    Steps:

        - Open Developer Tools: In Google Chrome, press F12 or right-click the page and select Inspect.
        - Go to the "Network" Tab: This tab shows all network requests made by the browser.
        - Refresh the Page: Reload the webpage and observe the list of HTTP/HTTPS requests made to the server.
        - Inspect Individual Requests: Click on individual requests to see details like headers, methods, and response data.
        - Observe HTTPS Traffic: When visiting a secure website (HTTPS), you will see that the data is encrypted and cannot be viewed in plain text.